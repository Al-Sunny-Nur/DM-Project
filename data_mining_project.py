# -*- coding: utf-8 -*-
"""Data Mining Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/179oBlj9YYLQ6befDPHFblOLax8OlVdnl
"""

def show_menu():
    print("\nMenu:")
    print("1. Dataset column Check")
    print("2. Dataset Null Value & Each column Unique value")
    print("3. Each category how many order/year")
    print("4. Each year how many order")
    print("5. Which sub-category how many order")
    print("6. Which sub-category how many sales price")
    print("7. Which customer segment how many sales price")
    print("8. Top 5 Product by sales frequency")
    print("9. which state how many order")
    print("10. Top 3 state by order")
    print("11. Shipping Delay")
    print("12. which shipping mode take how many time")
    print("13. Which shipping mode have how many order")
    print("14. sales details per month")
    print("15. Market Basket Analysis")
    print("16. next 30 days sales probability")
    print("17. Exit")

    choice = input("Enter your choice: ")
    return choice


!pip install hmmlearn
import pandas as pd
from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules
from mlxtend.preprocessing import TransactionEncoder
import pandas as pd
import numpy as np
from hmmlearn import hmm
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
sd= pd.read_csv('/content/sales_data.csv')

while True:
    choice = show_menu()
    #=========================================================================================================
    if choice == '1': #=========================================------1         Dataset column Check
    #=========================================================================================================
        print(sd.head(1))

    #=========================================================================================================
    elif choice == '2': #=========================================-----2     Dataset Null Value & Each column Unique value
    #=========================================================================================================
        print(sd.isnull().sum())
        for col in sd.columns:
          print(f'{col}: {sd[col].nunique()}')
    #=========================================================================================================
    elif choice == '3': #=========================================-----3   Each category how many order/year
    #=========================================================================================================


        sd['order_date'] = pd.to_datetime(sd['order_date'], dayfirst=True, errors='coerce')
        sd['order_year'] = sd['order_date'].dt.year

        plt.figure(figsize=(12, 6))
        sns.violinplot(x='category', y='order_year', data=sd, palette="viridis")
        plt.title('Violin Plot of Order Year by Category')
        plt.xlabel('Category')
        plt.ylabel('Order Year')
        plt.show()

    #=========================================================================================================
    elif choice == '4': #=========================================-----4   Each year how many order
    #=========================================================================================================
        sd['order_date'] = pd.to_datetime(sd['order_date'], dayfirst=True, errors='coerce')
        sd['order_month'] = sd['order_date'].dt.month
        sd['order_year'] = sd['order_date'].dt.year

        monthly_data = sd.groupby(['order_year', 'order_month'])['order_id'].count().reset_index()

        plt.figure(figsize=(12, 4))
        for year in monthly_data['order_year'].unique():
            year_data = monthly_data[monthly_data['order_year'] == year]
            sns.lineplot(x='order_month', y='order_id', data=year_data, label=str(year), linewidth=6)

        plt.title('Monthly Sales Data (Year by Year)')
        plt.xlabel('Month')
        plt.ylabel('Number of Orders')
        plt.xticks(range(1, 13))
        plt.legend()
        plt.show()

    #=========================================================================================================
    elif choice == '5': #=========================================-----5  Which sub-category how many order
    #=========================================================================================================
        sales_count_by_sub_category = sd.groupby('sub_category')['order_id'].count().sort_values(ascending=False)
        print("\nSales Count per Sub-Category (Descending Order):")
        print(sales_count_by_sub_category)
        plt.figure(figsize=(10, 6))
        sales_count_by_sub_category.plot(kind='bar', color='darkcyan')
        plt.xlabel('Sub-Category')
        plt.ylabel('Number of Sales')
        plt.title('Number of Sales per Sub-Category (Descending Order)')
        plt.xticks(rotation=35, ha='right')
        plt.show()
    #=========================================================================================================
    elif choice == '6': #=========================================-----6  Which sub-category how many sales price
    #=========================================================================================================
        sales_price_by_sub_category = sd.groupby('sub_category')['sales'].sum().sort_values(ascending=False)
        print("\nTotal Sales Price per Sub-Category (Descending Order):")
        print(sales_price_by_sub_category)
        plt.figure(figsize=(10, 6))
        sales_price_by_sub_category.plot(kind='bar', color='skyblue')
        plt.xlabel('Sub-Category')
        plt.ylabel('Total Sales Price')
        plt.title('Total Sales Price per Sub-Category (Descending Order)')
        plt.xticks(rotation=35, ha='right')
        plt.show()
    #=========================================================================================================
    elif choice == '7': #=========================================-----7  Which customer segment how many sales price
    #=========================================================================================================
        sales_data_cleaned = sd.dropna(subset=['segment'])
        customer_segments = sales_data_cleaned.groupby('segment')['sales'].sum().round(3)
        print("Sales by Customer Segments")
        print(customer_segments)

        import matplotlib.pyplot as plt
        customer_segments.plot(kind='pie', autopct='%1.1f%%', figsize=(8, 8), colors=['skyblue', 'tan', 'green'])
        plt.title("Sales by Customer Segment")
        plt.ylabel("")
        plt.show()
    #=========================================================================================================
    elif choice == '8': #=========================================-----8  Top 5 Product by sales frequency
    #=========================================================================================================
        sd['order_date'] = pd.to_datetime(sd['order_date'])
        sales_frequency = sd.groupby('product_name')['order_date'].count().sort_values(ascending=False)
        top_5_products = sales_frequency.head(5)

        print("\nTop 5 Products by Sales Frequency:")
        print(top_5_products)

        plt.figure(figsize=(10, 6))
        top_5_products.plot(kind='bar', color='skyblue')
        plt.xlabel('Product Name')
        plt.ylabel('Number of Sales')
        plt.title('Top 5 Products by Sales Frequency')
        plt.xticks(rotation=0, ha='center')
        plt.tight_layout()
        plt.show()
    #=========================================================================================================
    elif choice == '9': #=========================================-----9  which state how many order
    #=========================================================================================================
        state_columns = ['state']
        state_column = None
        for col in state_columns:
          if col in sd.columns:
            state_column = col
            break
        if state_column is None:
          print("Error: No state column found. Please check your CSV file.")
        else:
          state_order_counts = sd.groupby(state_column)['order_id'].count().sort_values(ascending=False)

          plt.figure(figsize=(10, 6))
          state_order_counts.plot(kind='bar', color='teal')
          plt.xlabel("State")
          plt.ylabel("Total Number of Orders")
          plt.title("Total Orders per State (Descending Order)")
          plt.xticks(rotation=50, ha='right')
          plt.tight_layout()
          plt.show()
    #=========================================================================================================
    elif choice == '10': #=========================================-----10    Top 3 state by order
    #=========================================================================================================

          state_columns = ['state',]
          state_column = None
          for col in state_columns:
            if col in sd.columns:
              state_column = col
              break

          if state_column is None:
            print("Error: No state column found. Please check your CSV file.")
          else:
            state_order_counts = sd.groupby(state_column)['order_id'].count()
            top_3_states = state_order_counts.sort_values(ascending=False).head(3)
            colors = ['skyblue', 'lightcoral', 'lightgreen']
            plt.figure(figsize=(6, 5))
            bars = plt.bar(top_3_states.index, top_3_states.values, color=colors)
            for bar in bars:
                yval = bar.get_height()
                plt.text(bar.get_x() + bar.get_width()/2, yval, int(yval), ha='center', va='bottom')

            plt.xlabel("State")
            plt.ylabel("Total Number of Orders")
            plt.title("Top 3 States by Total Orders")
            plt.xticks(rotation=0, ha='center')
            plt.tight_layout()
            plt.show()
    #=========================================================================================================
    elif choice == '11': #=========================================-----11  Check Shipping Delay
    #=========================================================================================================
          sd = pd.read_csv('/content/sales_data.csv')
          sd['order_date'] = pd.to_datetime(sd['order_date'], format='%m/%d/%Y')
          sd['ship_date'] = pd.to_datetime(sd['ship_date'], format='%m/%d/%Y')
          sd['delay'] = (sd['ship_date'] - sd['order_date']).dt.days

          plt.figure(figsize=(10, 6))
          sns.kdeplot(sd['delay'], color='red', fill=True) #Using KDE plot and red color
          plt.xlabel('Shipping Delay (days)')
          plt.ylabel('Density') #Change y-axis label to density
          plt.title('Distribution of Shipping Delays (KDE)') #Change title
          plt.grid(True)
          plt.show()


          plt.figure(figsize=(10, 6))
          plt.hist(sd['delay'], bins=30, edgecolor='black')
          plt.xlabel('Shipping Delay (days)')
          plt.ylabel('Frequency')
          plt.title('Distribution of Shipping Delays')
          plt.grid(True)
          plt.show()
    #=========================================================================================================
    elif choice == '12': #=========================================-----13 which shipping mode take how many time
    #=========================================================================================================
          sd = pd.read_csv('/content/sales_data.csv')
          sd['order_date'] = pd.to_datetime(sd['order_date'], format='%m/%d/%Y')
          sd['ship_date'] = pd.to_datetime(sd['ship_date'], format='%m/%d/%Y')
          sd['delay'] = (sd['ship_date'] - sd['order_date']).dt.days
          delay_stats_by_mode = sd.groupby('ship_mode')['delay'].agg(['mean', 'min', 'max'])

          delay_stats_by_mode = delay_stats_by_mode.rename(columns={
              'mean': 'Average Delay',
              'min': 'Minimum Delay',
              'max': 'Maximum Delay'
          })

          print(delay_stats_by_mode)


          delay_stats_by_mode = delay_stats_by_mode.sort_values(by='Average Delay')
          plt.figure(figsize=(10, 6))
          delay_stats_by_mode[['Minimum Delay', 'Average Delay', 'Maximum Delay']].plot(kind='bar', figsize=(10,6))
          plt.xlabel('Ship Mode')
          plt.ylabel('Shipping Delay (days)')
          plt.title('Shipping Delay Statistics by Ship Mode (Increasing Order)')
          plt.xticks(rotation=45, ha='right')
          plt.grid(axis='y')
          plt.tight_layout()
          plt.show()

    #=========================================================================================================
    elif choice == '13': #=========================================-----13 Which shipping mode have how many order
    #=========================================================================================================
          ship_mode_counts = sd['ship_mode'].value_counts()

          plt.figure(figsize=(8, 8))
          plt.pie(ship_mode_counts, labels=ship_mode_counts.index, autopct='%1.1f%%', startangle=90)
          plt.title('Distribution of Orders by Ship Mode')
          plt.axis('equal')
          plt.show()

    #=========================================================================================================
    elif choice == '14':#=========================================-------14 sales details per month
    #=========================================================================================================
          sd['order_date'] = pd.to_datetime(sd['order_date'])  # Convert to datetime if not already
          sd['order_year'] = sd['order_date'].dt.year
          sd['order_month'] = sd['order_date'].dt.month
          sales_by_year_month = sd.groupby(['order_year', 'order_month'])['sales'].sum()  # Calculate total sales by year and month

          best_sales_months = sales_by_year_month.groupby('order_year').idxmax()

          plt.figure(figsize=(12, 6))
          sales_by_year_month.plot(kind='bar', figsize=(10, 6))

          for year, (best_year, best_month) in best_sales_months.items():
              index_to_highlight = sales_by_year_month.index.get_loc((best_year, best_month))
              plt.gca().patches[index_to_highlight].set_color('orange')

          plt.xlabel('Year and Month')
          plt.ylabel('Total Sales')
          plt.title('Total Sales by Year and Month (Best Months Highlighted)')

          plt.xticks(range(len(sales_by_year_month)), [f'{year}-{month}' for year, month in sales_by_year_month.index], rotation=45, ha='right')
          plt.tight_layout()
          plt.show()

          for year in sales_by_year_month.index.get_level_values('order_year').unique():
              year_sales = sales_by_year_month[year]
              best_month = year_sales.idxmax()
              worst_month = year_sales.idxmin()
              print(f"Year: {year}")
              print(f"  Highest Sales: Month {best_month}, Sales: {year_sales[best_month]}")
              print(f"  Lowest Sales: Month {worst_month}, Sales: {year_sales[worst_month]}")

    #=========================================================================================================
    elif choice == '15':#=========================================-------15 Market Basket Analysis
    #=========================================================================================================


        sd = pd.read_csv('/content/sales_data.csv')

        # Assuming 'order_id' and 'product_id' are the relevant columns
        basket = sd.groupby('order_id')['sub_category'].apply(list).reset_index(name='products')

        # Convert the list of products to a one-hot encoded representation
        te = TransactionEncoder()
        te_ary = te.fit(basket['products']).transform(basket['products'])
        df = pd.DataFrame(te_ary, columns=te.columns_)

        # Apply Apriori algorithm with a min_support adjusted to capture itemsets
        frequent_itemsets = apriori(df, min_support=0.02, use_colnames=True)

        # Calculate num_itemsets dynamically based on frequent_itemsets
        num_itemsets = len(frequent_itemsets)

        # Generate association rules, now including num_itemsets
        rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1, num_itemsets=num_itemsets)

        print(rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']])
    #=========================================================================================================
    elif choice == '16':#=========================================-------16 next 30 days sales probability
    #=========================================================================================================

          sd = pd.read_csv('/content/sales_data.csv')
          sd['order_date'] = pd.to_datetime(sd['order_date'])

          # Aggregate daily sales
          daily_sales = sd.groupby('order_date')['sales'].sum()

          # Fill missing dates with 0 sales
          date_range = pd.date_range(start=daily_sales.index.min(), end=daily_sales.index.max())
          daily_sales = daily_sales.reindex(date_range, fill_value=0)

          # Prepare data for HMM
          sales_data = np.array(daily_sales).reshape(-1, 1)

          # Train the HMM model
          model = hmm.GaussianHMM(n_components=3, covariance_type="diag", n_iter=40)
          model.fit(sales_data)

          # Predict future sales
          num_days_to_predict = 30
          future_dates = pd.date_range(start=daily_sales.index.max() + pd.Timedelta(days=1), periods=num_days_to_predict)
          predicted_sales, _ = model.sample(num_days_to_predict)

          # Create a DataFrame for predicted sales
          predicted_sales_df = pd.DataFrame({'order_date': future_dates, 'predicted_sales': predicted_sales[:, 0]})
          predicted_sales_df = predicted_sales_df.set_index('order_date')

          # Combine actual and predicted sales
          combined_sales = pd.concat([daily_sales, predicted_sales_df['predicted_sales']], axis=0)

          # Plot 1: Combined actual and predicted sales
          plt.figure(figsize=(12, 6))
          plt.plot(daily_sales.index, daily_sales.values, label='Actual Sales', color='blue')
          plt.plot(predicted_sales_df.index, predicted_sales_df.values, label='Predicted Sales', color='red', linestyle='dashed')
          plt.xlabel('Date')
          plt.ylabel('Sales')
          plt.title('Actual and Predicted Sales with HMM')
          plt.xticks(rotation=45)
          plt.legend()
          plt.tight_layout()
          plt.show()

          # Plot 2: Predicted sales only
          plt.figure(figsize=(12, 6))
          plt.plot(predicted_sales_df.index, predicted_sales_df.values, label='Predicted Sales', color='red')
          plt.xlabel('Date')
          plt.ylabel('Sales')
          plt.title('Predicted Sales for Future Days with HMM')
          plt.xticks(rotation=45)
          plt.legend()
          plt.tight_layout()
          plt.show()



    #=========================================================================================================
    elif choice == '17':#=========================================-------17 exit
    #=========================================================================================================

    #=========================================================================================================
        print("Exiting...")
        break
    else:
        print("Invalid choice. Please try again.")